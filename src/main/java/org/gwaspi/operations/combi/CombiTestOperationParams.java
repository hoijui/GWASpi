/*
 * Copyright (C) 2013 Universitat Pompeu Fabra
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

package org.gwaspi.operations.combi;

import java.io.IOException;
import java.util.Collections;
import java.util.List;
import org.gwaspi.constants.NetCDFConstants.Defaults.OPType;
import org.gwaspi.model.DataSetKey;
import org.gwaspi.model.DataSetMetadata;
import org.gwaspi.model.MatricesList;
import org.gwaspi.model.OperationKey;
import org.gwaspi.operations.AbstractOperationParams;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

/**
 * Parameters for the {@link CombiTestMatrixOperation}.
 */
public class CombiTestOperationParams extends AbstractOperationParams {

	private static final Logger LOG = LoggerFactory.getLogger(CombiTestOperationParams.class);

	/**
	 * Whether we are to perform allelic or genotypic association tests.
	 */
	private final GenotypeEncoder encoder;
	private final GenotypeEncodingParams encodingParams;
	/**
	 * The number of total markers in the matrix we operate on, unfiltered.
	 */
	private Integer totalMarkers;
	/**
	 * Whether to use a directly specified threshold calibration alpha value,
	 * or evaluate one based on a P-Value target.
	 */
	private final Boolean thresholdCalibrationAlphasCalculationEnabled;
	/**
	 * Target P-Value for a sampling based evaluation of a good alpha.
	 * We resample (use random affections),
	 * calculate (insignificant) P-Values with a T-Test,
	 * and use the lowest P-Value (most significant) from that.
	 * We do this many times, and sort all the smallest P values,
	 * and the one that is closest to the given target,
	 * lets say the one at index 55 of 1000,
	 * we use the relative position as our alpha.
	 * In this case, it would be <math>55 / 1000 = 5.5%</math>.
	 * Default values are <math>P=10^{-5}</math> and <math>P=5*10^{-8}</math>.
	 * for more details, see supplement section 1 of the COMBI paper:
	 * "DETERMINATION of the TYPE level alpha"
	 */
	private final Double thresholdCalibrationAlphasCalculationPValueTarget;
	/**
	 * Number of resampling based T-Test iterations.
	 */
	private final Integer thresholdCalibrationAlphasCalculationIterations;
	/**
	 * Whether to use resampling based threshold calibration.
	 * This feature takes a lot of computation time!
	 */
	private final boolean thresholdCalibrationEnabled;
	/**
	 * Alpha values used to choose the threshold in the list of sorted minimal
	 * P-values generated by the threshold calibration iterations.
	 * Either one value per chromosome in the case of isPerChromosome() == true,
	 * or a single, genome wide used value.
	 * So if we have 1000 iterations, and alpha is 5% (0.05),
	 * Then we use the value at index (1000 * 0.05 =) 50
	 * of the ascending list of the 1000 smallest P-Values.
	 */
	private final List<Double> thresholdCalibrationAlphas;
	/**
	 * Number of resampling based threshold calibration iterations.
	 * The whole COMBI test will be run this many times,
	 * in order to find a threshold P-Value,
	 * before running the definitive COMBI test run.
	 */
	private final Integer thresholdCalibrationIterations;
	/**
	 * Whether to use run the SVM once per chromosome, or rather over the whole genome at once.
	 */
	private final Boolean perChromosome;
	/** Indicates the SVM solver library to use for generating the SNP/marker weights */
	private final SolverLibrary solverLibrary;
	/** The SVM solver parameters to use for generating the SNP/marker weights */
	private final SolverParams solverParams;
	/**
	 * Whether to use random sample affections.
	 * This is used for threshold calibration.
	 */
	private final Boolean usingRandomSampleAffections;

	public CombiTestOperationParams(
			OperationKey qaMarkersOperationKey,
			GenotypeEncoder encoder,
			final GenotypeEncodingParams encodingParams,
			final Boolean thresholdCalibrationAlphasCalculationEnabled,
			final Double thresholdCalibrationAlphasCalculationPValueTarget,
			final Integer thresholdCalibrationAlphasCalculationIterations,
			final Boolean thresholdCalibrationEnabled,
			final List<Double> thresholdCalibrationAlphas,
			final Integer thresholdCalibrationIterations,
			final Boolean perChromosome,
			final SolverLibrary solverLibrary,
			final SolverParams solverParams,
			final Boolean usingRandomSampleAffections,
			String name)
	{
		super(OPType.COMBI_ASSOC_TEST, new DataSetKey(qaMarkersOperationKey), name);

		this.encoder = (encoder == null)
				? getEncoderDefault()
				: encoder;
		this.encodingParams = (encodingParams == null)
				? getEncodingParamsDefault()
				: encodingParams;
		this.thresholdCalibrationAlphasCalculationEnabled
				= (thresholdCalibrationAlphasCalculationEnabled == null)
				? isThresholdCalibrationAlphasCalculationEnabledDefault()
				: thresholdCalibrationAlphasCalculationEnabled;
		this.thresholdCalibrationAlphasCalculationPValueTarget
				= (thresholdCalibrationAlphasCalculationPValueTarget == null)
				? getThresholdCalibrationAlphasCalculationPValueTargetDefault()
				: thresholdCalibrationAlphasCalculationPValueTarget;
		this.thresholdCalibrationAlphasCalculationIterations = (thresholdCalibrationAlphasCalculationIterations == null)
				? getThresholdCalibrationAlphasCalculationIterationsDefault()
				: thresholdCalibrationAlphasCalculationIterations;
		this.thresholdCalibrationEnabled = (thresholdCalibrationEnabled == null)
				? isThresholdCalibrationEnabledDefault()
				: thresholdCalibrationEnabled;
		if ((thresholdCalibrationAlphas != null) && this.thresholdCalibrationAlphasCalculationEnabled) {
			throw new IllegalArgumentException(
					"You may not specify alpha(s) directly (thresholdCalibrationAlpha), "
							+ "and also request for them to be calculated (thresholdCalibrationAlphasCalculationPValueTarget).");
		}
		this.thresholdCalibrationAlphas
				= (thresholdCalibrationAlphas == null)
				? getThresholdCalibrationAlphasDefault()
				: thresholdCalibrationAlphas;
		this.thresholdCalibrationIterations = (thresholdCalibrationIterations == null)
				? getThresholdCalibrationIterationsDefault()
				: thresholdCalibrationIterations;
		this.perChromosome = (perChromosome == null)
				? isPerChromosomeDefault()
				: perChromosome;
		this.solverLibrary = (solverLibrary == null)
				? getSolverLibraryDefault()
				: solverLibrary;
		this.solverParams = (solverParams == null)
				? getSolverParamsDefault(this.solverLibrary)
				: solverParams;
		this.usingRandomSampleAffections = (usingRandomSampleAffections == null)
				? isUsingRandomSampleAffectionsDefault()
				: usingRandomSampleAffections;
	}

	public CombiTestOperationParams(OperationKey qaMarkersOperationKey) {

		this(
				qaMarkersOperationKey,
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				null,
				null
				);
	}

	static int fetchTotalMarkers(DataSetKey parentKey) {

		int total = -1;

		DataSetMetadata parentMetadata;
		try {
			parentMetadata = MatricesList.getDataSetMetadata(parentKey);
			if (parentMetadata != null) {
				total = parentMetadata.getNumMarkers();
			}
		} catch (IOException ex) {
			LOG.debug("Failed to fetch the total number of markers", ex);
		}

		return total;
	}

	/** @deprecated use {@link #getParent()} instead */
	public OperationKey getQAMarkerOperationKey() {
		return getParent().getOperationParent();
	}

	public GenotypeEncoder getEncoder() {
		return encoder;
	}

	public static GenotypeEncoder getEncoderDefault() {
		return GenotypicGenotypeEncoder.SINGLETON;
	}

	public GenotypeEncodingParams getEncodingParams() {
		return encodingParams;
	}

	public static GenotypeEncodingParams getEncodingParamsDefault() {
		return new GenotypeEncodingParams();
	}

	public int getTotalMarkers() {

		if (totalMarkers == null) {
			totalMarkers = fetchTotalMarkers(getParent());
		}

		return totalMarkers;
	}

	public boolean isThresholdCalibrationAlphasCalculationEnabled() {
		return thresholdCalibrationAlphasCalculationEnabled;
	}

	public static boolean isThresholdCalibrationAlphasCalculationEnabledDefault() {
		return false;
	}

	public Integer getThresholdCalibrationAlphasCalculationIterations() {
		return thresholdCalibrationAlphasCalculationIterations;
	}

	public static Integer getThresholdCalibrationAlphasCalculationIterationsDefault() {
		return 1000;
	}

	public Double getThresholdCalibrationAlphasCalculationPValueTarget() {
		return thresholdCalibrationAlphasCalculationPValueTarget;
	}

	public static Double getThresholdCalibrationAlphasCalculationPValueTargetDefault() {
		return 5E-8;
	}

	public boolean isThresholdCalibrationEnabled() {
		return thresholdCalibrationEnabled;
	}

	public static boolean isThresholdCalibrationEnabledDefault() {
		return false;
	}

	public List<Double> getThresholdCalibrationAlphas() {
		return thresholdCalibrationAlphas;
	}

	public static Double getThresholdCalibrationAlphaDefault() {
		return 0.05;
	}

	public static List<Double> getThresholdCalibrationAlphasDefault() {
		return Collections.nCopies(22, getThresholdCalibrationAlphaDefault());
	}

	public Integer getThresholdCalibrationIterations() {
		return thresholdCalibrationIterations;
	}

	public static Integer getThresholdCalibrationIterationsDefault() {
		return 1000;
	}

	public boolean isPerChromosome() {
		return perChromosome;
	}

	public static boolean isPerChromosomeDefault() {
		return true;
	}

	public SolverLibrary getSolverLibrary() {
		return solverLibrary;
	}

	public static SolverLibrary getSolverLibraryDefault() {
		return SolverLibrary.LIB_SVM;
	}

	public SolverParams getSolverParams() {
		return solverParams;
	}

	public static SolverParams getSolverParamsDefault(final SolverLibrary solverLibrary) {

		final SolverParams solverParamsDefault;
		switch (solverLibrary) {
			case LIB_SVM:
				solverParamsDefault = new SolverParams(1E-3, 1E-5); // TODO
				break;
			case LIB_LINEAR:
				solverParamsDefault = new SolverParams(1E-2, 1E-4); // TODO
				break;
			default:
				throw new UnsupportedOperationException(
						"No default solver parameters given for solver " + solverLibrary.name());
		}

		return solverParamsDefault;
	}

	public boolean isUsingRandomSampleAffections() {
		return usingRandomSampleAffections;
	}

	protected static Boolean isUsingRandomSampleAffectionsDefault() {
		return false;
	}

	@Override
	protected String getNameDefault() {
		return "Combi-Test for matrix " + getParent().getOrigin().toString(); // TODO use nicer matrix name!
	}

	@Override
	public boolean isHidden() {
		return isUsingRandomSampleAffections();
	}
}
